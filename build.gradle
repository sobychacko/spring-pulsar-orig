buildscript {
//	repositories {
//		mavenCentral()
//		maven { url 'https://plugins.gradle.org/m2' }
//		maven { url 'https://repo.spring.io/plugins-release' }
//		mavenLocal()
//	}
	repositories {
		mavenCentral()
		gradlePluginPortal()
		maven { url 'https://repo.spring.io/plugins-release' }
	}
}

plugins {
	id 'base'
	id 'project-report'
	id 'idea'
	id 'org.sonarqube' version '2.8'
//	id 'org.ajoberstar.grgit' version '4.0.1' apply false
	id 'io.spring.nohttp' version '0.0.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
	id 'com.jfrog.artifactory' version '4.18.2' apply false
	id 'org.asciidoctor.jvm.pdf' version '3.3.2'
	id 'org.asciidoctor.jvm.gems' version '3.3.2'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

apply plugin: 'io.spring.nohttp'

//def gitPresent = new File('.git').exists()

//if(gitPresent) {
//	apply plugin: 'org.ajoberstar.grgit'
//}

description = 'Spring for Apache Pulsar'

ext {
//	if (gitPresent) {
//		modifiedFiles =
//			files(grgit.status().unstaged.modified).filter{ f -> f.name.endsWith('.java') || f.name.endsWith('.kt') }
//	}

	assertjVersion = '3.21.0'
	awaitilityVersion = '4.1.1'
	googleJsr305Version = '3.0.2'
	hamcrestVersion = '2.2'
	hibernateValidationVersion = '6.2.3.Final'
	jacksonBomVersion = '2.13.2.20220328'
	jaywayJsonPathVersion = '2.6.0'
	junit4Version = '4.13.2'
	junitJupiterVersion = '5.8.2'
	pulsarVersion = '2.10.0'
	log4jVersion = '2.17.2'
//	micrometerVersion = '2.0.0-SNAPSHOT'
	mockitoVersion = '4.0.0'
	reactorVersion = '2020.0.17'
	springBootVersion = '3.0.0-SNAPSHOT' // docs module
	springRetryVersion = '1.3.2'
	springVersion = '6.0.0-SNAPSHOT'

	idPrefix = 'pulsar'
}

nohttp {
	source.include '**/src/**'
	source.exclude '**/*.gif', '**/*.ks'
}

allprojects {
	group = 'org.springframework.pulsar'

	apply plugin: 'io.spring.dependency-management'

	dependencyManagement {
		resolutionStrategy {
			cacheChangingModulesFor 0, 'seconds'
		}
		applyMavenExclusions = false
		generatedPomCustomization {
			enabled = false
		}

		imports {
			mavenBom "com.fasterxml.jackson:jackson-bom:$jacksonBomVersion"
			mavenBom "org.junit:junit-bom:$junitJupiterVersion"
			mavenBom "org.springframework:spring-framework-bom:$springVersion"
			mavenBom "io.projectreactor:reactor-bom:$reactorVersion"
		}
	}

	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/release' }
		maven { url 'https://repo.spring.io/milestone' }
		if (version.endsWith('SNAPSHOT')) {
			maven { url 'https://repo.spring.io/snapshot' }
		}
//		maven { url 'https://repository.apache.org/content/groups/staging/' }
	}

}

subprojects { subproject ->
	apply plugin: 'java-library'
	apply plugin: 'java'
//	apply from: "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'jacoco'
//	apply plugin: 'checkstyle'

	java {
		withJavadocJar()
		withSourcesJar()
		registerFeature('optional') {
			usingSourceSet(sourceSets.main)
		}
		registerFeature('provided') {
			usingSourceSet(sourceSets.main)
		}
	}

	compileJava {
		sourceCompatibility = 17
		targetCompatibility = 17
	}

	compileTestJava {
		sourceCompatibility = 17
		options.encoding = 'UTF-8'
	}

	eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

	jacoco {
		toolVersion = '0.8.6'
	}

	configurations {
		all {
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		}
	}

	// dependencies that are common across all java projects
	dependencies {
		implementation "com.google.code.findbugs:jsr305:$googleJsr305Version"
		testImplementation 'org.junit.jupiter:junit-jupiter-api'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

		// To avoid compiler warnings about @API annotations in JUnit code
		testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'

		testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

		testImplementation("org.awaitility:awaitility:$awaitilityVersion") {
			exclude group: 'org.hamcrest'
		}
		testImplementation "org.hamcrest:hamcrest-core:$hamcrestVersion"
		optionalApi "org.assertj:assertj-core:$assertjVersion"



		testImplementation("org.testcontainers:pulsar:1.17.2") {
			exclude module: 'log4j-to-slf4j'
		}

	}

	// enable all compiler warnings; individual projects may customize further
	[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

	test {
		testLogging {
			events "skipped", "failed"
			showStandardStreams = project.hasProperty("showStandardStreams") ?: false
			showExceptions = true
			showStackTraces = true
			exceptionFormat = 'full'
		}

		maxHeapSize = '1536m'
//		jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=127.0.0.1:8111'
		jacoco {
			destinationFile = file("$buildDir/jacoco.exec")
		}
		useJUnitPlatform()

		if (System.properties['sonar.host.url']) {
			finalizedBy jacocoTestReport
		}
	}

	checkstyle {
		configDirectory.set(rootProject.file("src/checkstyle"))
		toolVersion = '9.0'
	}

	jacocoTestReport {
		reports {
			xml.enabled true
			csv.enabled false
			html.enabled false
			xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
		}
	}

	jar {
		manifest {
			attributes(
					'Implementation-Version': archiveVersion,
//					'Created-By': "JDK ${System.properties['java.version']} (${System.properties['java.specification.vendor']})",
					'Implementation-Title': subproject.name,
					'Implementation-Vendor-Id': subproject.group,
					'Implementation-Vendor': 'Pivotal Software, Inc.',
//					'Implementation-URL': linkHomepage,
					'Automatic-Module-Name': subproject.name.replace('-', '.')  // for Jigsaw
			)
		}

		from("${rootProject.projectDir}/src/dist") {
			include 'license.txt'
			include 'notice.txt'
			into 'META-INF'
			expand(copyright: new Date().format('yyyy'), version: project.version)
		}
	}

}

project ('spring-pulsar') {
	description = 'Spring Pulsar Support'

	dependencies {
		api "org.springframework.boot:spring-boot:$springBootVersion"
		api "org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"
		api "org.springframework.boot:spring-boot-starter:$springBootVersion"
		api "org.springframework.boot:spring-boot-starter-logging:$springBootVersion"
		api "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
		api 'org.springframework:spring-context'
		api 'org.springframework:spring-messaging'
		api 'org.springframework:spring-tx'
		api ("org.springframework.retry:spring-retry:$springRetryVersion") {
			exclude group: 'org.springframework'
		}
		api "org.apache.pulsar:pulsar-client:$pulsarVersion"
		api "org.apache.pulsar:pulsar-client-admin:$pulsarVersion"
		api "org.apache.pulsar:pulsar-client-admin-api:$pulsarVersion"

		optionalApi 'com.fasterxml.jackson.core:jackson-core'
		optionalApi 'com.fasterxml.jackson.core:jackson-databind'
		optionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
		optionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
		optionalApi 'com.fasterxml.jackson.datatype:jackson-datatype-joda'
		optionalApi ('com.fasterxml.jackson.module:jackson-module-kotlin') {
			exclude group: 'org.jetbrains.kotlin'
		}

		optionalApi "com.jayway.jsonpath:json-path:$jaywayJsonPathVersion"

		optionalApi 'io.projectreactor:reactor-core'
//		optionalApi "io.micrometer:micrometer-core:$micrometerVersion"

		testImplementation 'io.projectreactor:reactor-test'
		testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
		testImplementation "org.hibernate.validator:hibernate-validator:$hibernateValidationVersion"
	}
}
